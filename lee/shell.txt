正则表达式和通配符
正则表达式是包含匹配
grep,awk,sed
通配符是完全匹配
ls,find,cp使用的是shell的通配符
通配符*代表任意字符

正则*匹配0-n次单字符重复
grep 'a*' test.txt #匹配所有行
grep 'aa*' test.txt #匹配包含有a的行
grep 'aaa*' test.txt #匹配包含有'aa'的行
grep '^aaa*' test.txt #匹配由'aa'开头的行
grep '^a\{3\}' test.txt #匹配包含有3个a的行
grep '[0-9]\{3\}' test.txt #匹配包含有3位数字的行
grep '[0-9]\{3,9\}' test.txt #匹配包含有最少3位最多9位数字的行
grep -n 'gd' test.txt #匹配包含gd的所有行并且显示行号
grep -n '[a-zA-Z]' test.txt #匹配所有包含有字母的行并显示行号
grep -n '[^a-zA-Z]' test.txt #匹配所有不包含有字母的行并显示行号

用cut命令提取字符串
字符提取命令有:cut,awk,sed
cut -d ':' -f 1,3 /etc/passwd
cat /etc/passwd | grep /bin/bash | grep -v root | cut -d ':' -f 1
cut命令不能识别空格，只能识别制表符，逗号，句号等
要用空格，就用awk编程，cut能搞定的简单功能就用cut

用printf命令格式化输出
与echo命令一样都是输出
输出类型
printf '%ns' n表示输出几个，s表示字符
printf '%ni' i表示数字
printf '%m.nf' f表示浮点数，8位数，6位整数，2位小数
输出格式: %a警告音 %b退格键Backspace键 %f清除屏幕 %n换行 %r回车 %t水平退格tab键 %v垂直输出退格tab键
printf '%s %s %s\n' 1 2 3 4 5 6
printf '%s\t %s\t %s\n' 

使用awk进行字符串截取
cut不方便使用空格作为分隔符
awk '条件1{动作1}条件2{动作2}'
df -h | awk '{print $1 "\t" $5 "\t"}'
awk '{printf $2 "\t" $6 "\n"}' student.txt
awk 'BEGIN {print "test !!"} {print $2 "\t" $6 "\n"}'
awk 'BEGIN {FS=":"} END {print "test done !!"} {print $2 "\t" $6 "\n"}' student.txt
cat student.tt | grep -v Name | awk '$6 >= 87 {printf $2 "\n"}'

sed命令
cut2,print1,awk2,字段截取，1行截取，2列截取
sed轻量级流编辑器，用来将数据进行选取，替换，删除和新增的命令
主要用于对命令的结果进行修改替换
没有awk复杂

sed[选项]'[动作]' 文件名
-n 只输出处理的行到屏幕
-e 允许对数据应用多条sed编辑
-i 

a \: 追加
c \: 行替换
i \: 插入
d: 删除
p: 打印

sed -n '2p' #只输出第二行到屏幕
df -h | sed -n '2p'
sed '2,3d' student.tt #打印删除2-3行之后的输出（不会真的删除文件中的内容，而是输出）
sed '2a 你好' student.txt #在第二行之后追加'你好'
sed '2i canglaoshi' student.txt #在第二行之前插入'canglaoshi'
sed '2c no person' student.txt #把第二行内容换成 'no person'
sed '2s/99/55/g' #把第二行的'99'替换成'55'(只改了输出)
sed -i '2s/99/55/g' #把第二行的'99'替换成'55'(修改了文件，建议少用) 
sed -e 's/Liming//g;s/Gao//g' student.txt #同时把'Liming'和'Gao'换成''


字符处理命令
sort排序命令
sort [选项] 文件名 
-f 忽略大小写
-n 以数值型进行排序
-r 方向排序
cat /etc/passwd
sort /etc/passwd
sort -r /etc/passwd
sort -n -t ":" -k 3,3 /etc/passwd #指定":"为分隔符，按照第三列为数值型进行正常排序
wc统计命令
wc [选项] 文件名
-l 只统计行数
-w 只统计单词数
-m 只统计字符数
wc /etc/passwd #所有统计维度都打印统计结果


条件判断
判断文件是否存在
-d 文件名 # 是否存在并为目录
-e 文件名 # 是否存在
-f 文件名 # 是否存在并为文件
-L 文件名 # 是否存在并为链接
test -e student.txt 然后使用 echo $? 查看上一条命令的返回结果，0为真
一般脚本中用中括号扩起来
[ -e /root/install.log ] # 判断这个指定文件是否存在
更好的方式
[ -d /root ] && echo 'Yes, /root is afolder!' || echo '/root isnot a folder.'
判断文件权限
-w 只能判断有没有写权限无法判断是哪个用户
文件1 -nt 文件2 判断文件1是否比文件2新
文件1 -ot 文件2 判断文件1是否比文件2旧
文件1 -ef 文件2 判断文件是否为同一个文件，是否为硬链接
ll -i /tmp/yinglink 判断硬链接

num1 -eq num2 相等
-gt =
-ne <>
-gt >
-lt <
-ge >=
-le <=

-z 判断变量是否为空,为空返回真
[-z $name]
-n 判断变量是否非空，非空返回真
== 判断变量字串是否相等
!= 是否不想等

多重条件的判断
-a 逻辑与
-o 逻辑或
! 逻辑非
aa =24
[-n "$aa" -a "$aa" -gt 23] && echo yes || echo no


流程控制
if     -------------   [ ... ]
[ -e /home ] && echo yes || echo no
if[ ... ];then
	...
fi
或者
if[ ... ]
then #then另起一行这里不需要分号
	...
fi



case


for


while







